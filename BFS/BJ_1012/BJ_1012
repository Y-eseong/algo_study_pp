import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class javaTest {
	
	static int M,N;
	
	static int[] dx = {-1,1,0,0};
	static int[] dy = {0,0,1,-1};
	
	static int[][] map;
	static boolean[][] visited;
    
    static int answer;

    
    public static void main(String[] args) throws IOException {
    	BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    	
    	int T = Integer.parseInt(in.readLine());
    	
    	//테스트 케이스 T번 반복
    	for (int u = 0; u < T; u++) {
    		answer = 0;
    		String[] arr = in.readLine().split(" ");
    		
    		M = Integer.parseInt(arr[0]);
    		N = Integer.parseInt(arr[1]);
    		int K = Integer.parseInt(arr[2]);
    		
    		map = new int[M][N];
    		visited = new boolean[M][N];
    		
    		for (int i = 0; i < K; i++) {
    			String[] test = in.readLine().split(" ");
    			int a = Integer.parseInt(test[0]);
        		int b = Integer.parseInt(test[1]);
        		map[a][b] = 1;
    		}
    		
    		//System.out.println(Arrays.deepToString(map));
    		//여기까지 배열에 배추 위치 셋팅 완료
    		
    		
    		//이제 bfs 시작해야 한다.
    		for (int i = 0; i < M; i++) {
    			for (int j = 0; j < N; j++) {
    				if (map[i][j] == 1 && !visited[i][j]) {
    					answer += bfs(i,j);
    				}
    			}
    		}
    		
    		
    	System.out.println(answer);
    	}
    	
}
    
    public static int bfs(int x, int y) {
    	Queue<int[]> queue = new LinkedList<>();
    	queue.offer(new int[] {x,y});
    	visited[x][y] = true;
    	
    	while (!queue.isEmpty()) {
    		int[] now = queue.poll();
    		
    		for (int i = 0; i < 4; i++) {
    			int nx = now[0]+dx[i];
    			int ny = now[1]+dy[i];
    			
    			if (nx < 0 || ny < 0 || nx >= M || ny >= N) {continue;}
    			if (map[nx][ny] == 0 || visited[nx][ny]) {continue;}
    			
    			queue.offer(new int[] {nx, ny});
				visited[nx][ny] = true;
    			
    		}
    		
    	}
    	return 1;
    }
    
}
